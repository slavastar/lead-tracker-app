generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(uuid()) @db.Uuid
  email     String           @unique
  name      String?
  credits   Int              @default(10)
  purchases CreditPurchase[]
  leads     Lead[]
  runs      PromptRun[]
  profile   UserProfile?
}

model Lead {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  company   String?
  email     String
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id     String  @id @default(uuid()) @db.Uuid
  bio    String?
  userId String  @unique @db.Uuid
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditPurchase {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  credits   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PromptTemplate {
  id        String      @id @default(uuid()) @db.Uuid
  key       String
  version   Int
  label     String
  body      String
  isActive  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  runs      PromptRun[]

  @@unique([key, version])
  @@index([key, isActive])
}

model PromptRun {
  id              String         @id @default(uuid()) @db.Uuid
  userId          String         @db.Uuid
  leadId          String?        @db.Uuid
  templateId      String         @db.Uuid
  templateKey     String
  templateVersion Int
  language        String
  formality       String
  variables       Json
  finalPrompt     String
  model           String
  tokenCount      Int
  response        Json
  createdAt       DateTime       @default(now())
  template        PromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateKey, templateVersion])
}
